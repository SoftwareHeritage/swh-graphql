scalar SWHId

scalar DateTime

interface Node {
  id: ID!
}

interface SWHNode {
  id: SWHId!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}
type OriginConnection {
  edges: [OriginEdge]
  nodes: [Origin]
  pageInfo: PageInfo!
  totalCount: Int
}

type OriginEdge {
  cursor: String!
  node: Origin
}

type Origin implements SWHNode {
  id: SWHId!
  url: String!
  visits(
    first: Int
    after: String
  ): VisitConnection!
}

type VisitConnection {
  edges: [VisitEdge]
  nodes: [Visit]
  pageInfo: PageInfo!
  totalCount: Int
}

type VisitEdge {
  cursor: String!
  node: Visit
}

type Visit implements Node {
  id: ID!
  date: DateTime!
  type: String
  status(
    first: Int
    after: String
  ): VisitStatusConnection
  # origin: Origin # FIXME, this can be added later
}

type VisitStatusConnection {
  edges: [VisitStatusEdge]
  nodes: [VisitStatus]
  pageInfo: PageInfo!
  totalCount: Int
}

type VisitStatusEdge {
  cursor: String!
  node: [VisitStatus]
}

type VisitStatus implements Node {
  id: ID!
  status: String!
  date: DateTime!
  snapshot: Snapshot
  type: String
}

# FIXME, add OriginSnapshotConnection

type Snapshot implements SWHNode {
  id: SWHId!
  branches(
    first: Int
    after: String
  ): BranchConnection
}

type BranchConnection {
  edges: [BranchConnectionEdge]
  nodes: [Branch]
  pageInfo: PageInfo!
  totalCount: Int
}

type BranchConnectionEdge {
  cursor: String!
  node: [Branch]
}

type Branch implements Node {
  # FIXME, maybe implement Node is not needed here
  # This has no independent existence
  id: ID!
  name: String
  type: String  # FIXME, change to an enum
}

type Query {
  """
  Get an origin with its url
  """
  # FIXME, find some unique id to help cache
  # maybe base64 encode the URL
  origin(
    url: String!
  ): Origin

  """
  Get a list of origins
  matching the given filters
  Can also be used to search for an origin
  """
  # FIMXE, use Input types to make this cleaner
  origins(
    first: Int
    after: String
  ): OriginConnection

  """
  Get a visit object with its id
  and/or origin and visit id
  """
  # FIXME, find some unique id to help cache
  visit(
    originUrl: String!
    id: String!
  ): Visit

  """
  Get a snapshot with SWHId
  """
  snapshot(
    SWHId: String!
  ): Snapshot

  # """
  # Get all the snapshot for the given origin
  # """
  # originSnapshot(
  #   originUrl: String!
  #   first: Int
  #   after: String
  # ): SnapshotConnection
}


# Make revisionconnection
# Make contnetConnection
