interface Node {
  id: ID!
}

scalar Date

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type Origin implements Node {
  url: String!
  id: ID!
  visits(
    first: Int
    after: String
  ): VisitConnection!
}

type OriginEdge {
  cursor: String!
  node: [Origin]
}

type OriginConnection {
  edges: [OriginEdge]
  nodes: [Origin]
  pageInfo: PageInfo!
  totalCount: Int
}

type Visit implements Node {
  id: ID!
  date: Date
  status: String
  origin: Origin!
}

type VisitEdge {
  cursor: String!
  node: [Visit]
}

type VisitConnection {
  edges: [VisitEdge]
  nodes: [Visit]
  pageInfo: PageInfo!
  totalCount: Int
}

type Query {
  """
  Get an origin with its url
  """
  origin(
    url: String!
  ): Origin

  """
  Get a list of origins
  matching the given filters
  """
  origins(
    first: Int
    after: String
  ): OriginConnection!
}
